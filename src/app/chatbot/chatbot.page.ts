import { Component, OnInit, ViewChild } from '@angular/core';
import { IonicModule, IonContent } from '@ionic/angular';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { OpenAiService } from '../services/openai.service';

interface ChatMessage {
  content: string;
  sender: 'user' | 'bot';
  type: 'text' | 'image';
  imageUrl?: string;
  timestamp?: Date;
  language?: string;
}

interface SuggestedPrompt {
  label: string;
  text: string;
  category: 'weather' | 'location' | 'activity';
  language?: string;
}

interface LanguageOption {
  code: string;
  name: string;
  nativeName: string;
}

@Component({
  selector: 'app-chatbot',
  templateUrl: './chatbot.page.html',
  styleUrls: ['./chatbot.page.scss'],
  standalone: true,
  imports: [IonicModule, CommonModule, FormsModule]
})
export class ChatbotPage implements OnInit {
  @ViewChild(IonContent) content!: IonContent;
  
  messages: ChatMessage[] = [];
  userInput = '';
  activeMode: 'chat' | 'story' | null = null;
  recognition: any;
  isLoading = false;
  currentLanguage: string = 'en';

  // Language options
  languages: LanguageOption[] = [
    { code: 'en', name: 'English', nativeName: 'English' },
    { code: 'zh', name: 'Chinese', nativeName: 'ф╕нцЦЗ' },
    { code: 'ms', name: 'Malay', nativeName: 'Bahasa Melayu' },
    { code: 'ta', name: 'Tamil', nativeName: 'родрооро┐ро┤рпН' }
  ];

  // UI text in different languages
  uiText = {
    en: {
      appTitle: 'AI Companion',
      welcomeMessage: "Hello! Choose a suggestion below or type your own question! You can change the language using the language button in the top right corner.",
      storyWelcome: "I'd love to hear your story! Pick a memory type or share your own.",
      chatMode: "Chat Mode",
      storyMode: "Story Mode",
      chatDescription: "Let's chat! I can help with questions about activities, weather, or just have a friendly conversation.",
      storyDescription: "Share your memories with me and I'll help create a story with pictures!",
      inputPlaceholder: "Type your message...",
      storyInputPlaceholder: "Share a memory...",
      backToMenu: "Back to Menu",
      loadingMessage: "I'm working on your story and creating an image...",
      errorMessage: "I encountered an issue. Please try again in a moment.",
      processingRequest: "Processing your request..."
    },
    zh: {
      appTitle: 'щХ┐шАЕхРМф╝┤',
      welcomeMessage: "цВихе╜я╝БщАЙцЛйф╕ЛщЭвчЪДх╗║шооцИЦш╛УхЕецВишЗкх╖▒чЪДщЧощвШя╝БцВихПпф╗еф╜┐чФихП│ф╕КшзТчЪДшпншиАцМЙщТоцЫ┤цФ╣шпншиАуАВ",
      storyWelcome: "цИСх╛ИцГ│хРмхРмцВичЪДцХЕф║Ля╝БщАЙцЛйф╕АчзНшо░х┐Жч▒╗хЮЛцИЦхИЖф║лцВишЗкх╖▒чЪДцХЕф║ЛуАВ",
      chatMode: "шБКхдйцибх╝П",
      storyMode: "цХЕф║Лцибх╝П",
      chatDescription: "шойцИСф╗мшБКхдйхРзя╝БцИСхПпф╗ех╕охКйхЫЮчнФхЕ│ф║Оц┤╗хКиуАБхдйц░ФчЪДщЧощвШя╝МцИЦшАЕхПкцШпш┐ЫшбМхПЛхе╜чЪДф║дш░ИуАВ",
      storyDescription: "ф╕ОцИСхИЖф║лцВичЪДшо░х┐Жя╝МцИСх░Жх╕охКйхИЫх╗║х╕жцЬЙхЫ╛чЙЗчЪДцХЕф║Ля╝Б",
      inputPlaceholder: "ш╛УхЕецВичЪДц╢ИцБп...",
      storyInputPlaceholder: "хИЖф║лф╕Ацо╡шо░х┐Ж...",
      backToMenu: "ш┐ФхЫЮшПЬхНХ",
      loadingMessage: "цИСцнгхЬихИЫф╜ЬцВичЪДцХЕф║Лх╣╢чФЯцИРхЫ╛хГП...",
      errorMessage: "цИСщБЗхИ░ф║ЖщЧощвШуАВшп╖чиНхРОхЖНшпХуАВ",
      processingRequest: "цнгхЬихдДчРЖцВичЪДшп╖ц▒В..."
    },
    ms: {
      appTitle: 'Rakan ElderLead',
      welcomeMessage: "Hai! Pilih cadangan di bawah atau taip soalan anda sendiri! Anda boleh menukar bahasa menggunakan butang bahasa di sudut kanan atas.",
      storyWelcome: "Saya ingin mendengar cerita anda! Pilih jenis kenangan atau kongsikan kenangan anda sendiri.",
      chatMode: "Mod Perbualan",
      storyMode: "Mod Cerita",
      chatDescription: "Mari berbual! Saya boleh membantu dengan soalan tentang aktiviti, cuaca, atau sekadar perbualan mesra.",
      storyDescription: "Kongsi kenangan anda dengan saya dan saya akan membantu mencipta cerita dengan gambar!",
      inputPlaceholder: "Taip mesej anda...",
      storyInputPlaceholder: "Kongsi kenangan...",
      backToMenu: "Kembali ke Menu",
      loadingMessage: "Saya sedang menyiapkan cerita anda dan mencipta imej...",
      errorMessage: "Saya menghadapi masalah. Sila cuba lagi sebentar.",
      processingRequest: "Memproses permintaan anda..."
    },
    ta: {
      appTitle: 'роОро▓рпНроЯро░рпНро▓рпАроЯрпН родрпЛро┤ро░рпН',
      welcomeMessage: "ро╡рогроХрпНроХроорпН! роХрпАро┤рпЗ роЙро│рпНро│ рокро░ро┐роирпНродрпБро░рпИроХро│рпИродрпН родрпЗро░рпНроирпНродрпЖроЯрпБроХрпНроХро╡рпБроорпН роЕро▓рпНро▓родрпБ роЙроЩрпНроХро│рпН роЪрпКроирпНрод роХрпЗро│рпНро╡ро┐ропрпИродрпН родроЯрпНроЯроЪрпНроЪрпБ роЪрпЖропрпНропро╡рпБроорпН! ро╡ро▓родрпБ роорпЗро▓рпН роорпВро▓рпИропро┐ро▓рпН роЙро│рпНро│ роорпКро┤ро┐ рокрпКродрпНродро╛ройрпИрокрпН рокропройрпНрокроЯрпБродрпНродро┐ роорпКро┤ро┐ропрпИ рооро╛ро▒рпНро▒ро▓ро╛роорпН.",
      storyWelcome: "роЙроЩрпНроХро│рпН роХродрпИропрпИроХрпН роХрпЗроЯрпНроХ ро╡ро┐ро░рпБроорпНрокрпБроХро┐ро▒рпЗройрпН! роТро░рпБ роиро┐ройрпИро╡рпБ ро╡роХрпИропрпИродрпН родрпЗро░рпНроирпНродрпЖроЯрпБроХрпНроХро╡рпБроорпН роЕро▓рпНро▓родрпБ роЙроЩрпНроХро│рпН роЪрпКроирпНрод роиро┐ройрпИро╡рпИрокрпН рокроХро┐ро░ро╡рпБроорпН.",
      chatMode: "роЕро░роЯрпНроЯрпИ роорпБро▒рпИ",
      storyMode: "роХродрпИ роорпБро▒рпИ",
      chatDescription: "роиро╛роорпН роЕро░роЯрпНроЯрпИропроЯро┐рокрпНрокрпЛроорпН! роироЯро╡роЯро┐роХрпНроХрпИроХро│рпН, ро╡ро╛ройро┐ро▓рпИ рокро▒рпНро▒ро┐роп роХрпЗро│рпНро╡ро┐роХро│рпБроХрпНроХрпБ роЙродро╡ро▓ро╛роорпН, роЕро▓рпНро▓родрпБ роироЯрпНрокрпБ роЙро░рпИропро╛роЯро▓рпИ роорпЗро▒рпНроХрпКро│рпНро│ро▓ро╛роорпН.",
      storyDescription: "роЙроЩрпНроХро│рпН роиро┐ройрпИро╡рпБроХро│рпИ роОройрпНройрпБроЯройрпН рокроХро┐ро░рпНроирпНродрпБроХрпКро│рпНро│рпБроЩрпНроХро│рпН, роиро╛ройрпН рокроЯроЩрпНроХро│рпБроЯройрпН роТро░рпБ роХродрпИропрпИ роЙро░рпБро╡ро╛роХрпНроХ роЙродро╡рпБро╡рпЗройрпН!",
      inputPlaceholder: "роЙроЩрпНроХро│рпН роЪрпЖропрпНродро┐ропрпИродрпН родроЯрпНроЯроЪрпНроЪрпБ роЪрпЖропрпНропро╡рпБроорпН...",
      storyInputPlaceholder: "роТро░рпБ роиро┐ройрпИро╡рпИрокрпН рокроХро┐ро░ро╡рпБроорпН...",
      backToMenu: "роорпЖройрпБро╡ро┐ро▒рпНроХрпБродрпН родро┐ро░рпБроорпНрокрпБроХ",
      loadingMessage: "роиро╛ройрпН роЙроЩрпНроХро│рпН роХродрпИропрпИ роЙро░рпБро╡ро╛роХрпНроХро┐, рокроЯродрпНродрпИ роЙро░рпБро╡ро╛роХрпНроХрпБроХро┐ро▒рпЗройрпН...",
      errorMessage: "роиро╛ройрпН роТро░рпБ роЪро┐роХрпНроХро▓рпИ роЪроирпНродро┐родрпНродрпЗройрпН. роЪро┐ро▒ро┐родрпБ роирпЗро░роорпН роХро┤ро┐родрпНродрпБ роорпАрогрпНроЯрпБроорпН роорпБропро▒рпНроЪро┐роХрпНроХро╡рпБроорпН.",
      processingRequest: "роЙроЩрпНроХро│рпН роХрпЛро░ро┐роХрпНроХрпИропрпИ роЪрпЖропро▓ро╛роХрпНроХрпБроХро┐ро▒родрпБ..."
    }
  };

  // English prompts
  suggestedPromptsEn: SuggestedPrompt[] = [
    {
      label: 'тШАя╕П Weather Today',
      text: "What's the weather like today?",
      category: 'weather',
      language: 'en'
    },
    {
      label: 'ЁЯПГтАНтЩВя╕П Activities Nearby',
      text: 'What activities can I do nearby?',
      category: 'activity',
      language: 'en'
    },
    {
      label: 'ЁЯОп Popular Places',
      text: 'Where are some popular places to visit?',
      category: 'location',
      language: 'en'
    },
    {
      label: 'ЁЯЪ╢тАНтЩВя╕П Walking Spots',
      text: 'Where can I go for a nice walk?',
      category: 'location',
      language: 'en'
    },
    {
      label: 'ЁЯМзя╕П Rain Check',
      text: 'Will it rain today?',
      category: 'weather',
      language: 'en'
    },
    {
      label: 'ЁЯОи Weekend Activities',
      text: 'What activities can I do this weekend?',
      category: 'activity',
      language: 'en'
    }
  ];

  // Chinese prompts
  suggestedPromptsZh: SuggestedPrompt[] = [
    {
      label: 'тШАя╕П ф╗КцЧехдйц░Ф',
      text: "ф╗Кхдйхдйц░ФцАОф╣Ица╖я╝Я",
      category: 'weather',
      language: 'zh'
    },
    {
      label: 'ЁЯПГтАНтЩВя╕П щЩДш┐Сц┤╗хКи',
      text: 'щЩДш┐СцЬЙф╗Аф╣Иц┤╗хКихПпф╗ехПВхКая╝Я',
      category: 'activity',
      language: 'zh'
    },
    {
      label: 'ЁЯОп чГнщЧицЩпчВ╣',
      text: 'цЬЙхУкф║ЫчГнщЧицЩпчВ╣хПпф╗ехПВшзВя╝Я',
      category: 'location',
      language: 'zh'
    },
    {
      label: 'ЁЯЪ╢тАНтЩВя╕П цХгцнехЬ░чВ╣',
      text: 'хУкщЗМщАВхРИцХгцнея╝Я',
      category: 'location',
      language: 'zh'
    },
    {
      label: 'ЁЯМзя╕П ф╝Ъф╕ЛщЫихРЧ',
      text: 'ф╗Кхдйф╝Ъф╕ЛщЫихРЧя╝Я',
      category: 'weather',
      language: 'zh'
    },
    {
      label: 'ЁЯОи хСицЬлц┤╗хКи',
      text: 'хСицЬлхПпф╗ехБЪф╗Аф╣Иц┤╗хКия╝Я',
      category: 'activity',
      language: 'zh'
    }
  ];

  // Malay prompts
  suggestedPromptsMs: SuggestedPrompt[] = [
    {
      label: 'тШАя╕П Cuaca Hari Ini',
      text: "Bagaimana cuaca hari ini?",
      category: 'weather',
      language: 'ms'
    },
    {
      label: 'ЁЯПГтАНтЩВя╕П Aktiviti Berdekatan',
      text: 'Apa aktiviti yang boleh saya lakukan di sekitar sini?',
      category: 'activity',
      language: 'ms'
    },
    {
      label: 'ЁЯОп Tempat Popular',
      text: 'Di mana tempat popular untuk dilawati?',
      category: 'location',
      language: 'ms'
    },
    {
      label: 'ЁЯЪ╢тАНтЩВя╕П Tempat Berjalan',
      text: 'Di mana saya boleh berjalan-jalan?',
      category: 'location',
      language: 'ms'
    },
    {
      label: 'ЁЯМзя╕П Semakan Hujan',
      text: 'Adakah hari ini akan hujan?',
      category: 'weather',
      language: 'ms'
    },
    {
      label: 'ЁЯОи Aktiviti Hujung Minggu',
      text: 'Apa aktiviti yang boleh saya lakukan pada hujung minggu ini?',
      category: 'activity',
      language: 'ms'
    }
  ];

  // Tamil prompts
  suggestedPromptsTa: SuggestedPrompt[] = [
    {
      label: 'тШАя╕П роЗройрпНро▒рпИроп ро╡ро╛ройро┐ро▓рпИ',
      text: "роЗройрпНро▒рпБ ро╡ро╛ройро┐ро▓рпИ роОрокрпНрокроЯро┐ роЙро│рпНро│родрпБ?",
      category: 'weather',
      language: 'ta'
    },
    {
      label: 'ЁЯПГтАНтЩВя╕П роЕро░рпБроХро┐ро▓рпН роЪрпЖропро▓рпНрокро╛роЯрпБроХро│рпН',
      text: 'роЕро░рпБроХро┐ро▓рпН роиро╛ройрпН роОройрпНрой роЪрпЖропро▓рпНрокро╛роЯрпБроХро│рпИроЪрпН роЪрпЖропрпНропро▓ро╛роорпН?',
      category: 'activity',
      language: 'ta'
    },
    {
      label: 'ЁЯОп рокро┐ро░рокро▓рооро╛рой роЗроЯроЩрпНроХро│рпН',
      text: 'рокро╛ро░рпНро╡рпИропро┐роЯ рокро┐ро░рокро▓рооро╛рой роЗроЯроЩрпНроХро│рпН роОроЩрпНроХрпЗ роЙро│рпНро│рой?',
      category: 'location',
      language: 'ta'
    },
    {
      label: 'ЁЯЪ╢тАНтЩВя╕П роироЯрпИрокропро┐ро▒рпНроЪро┐ роЗроЯроЩрпНроХро│рпН',
      text: 'роЕро┤роХро╛рой роироЯрпИрокрпНрокропрогродрпНродро┐ро▒рпНроХрпБ роОроЩрпНроХрпЗ роЪрпЖро▓рпНро▓ро▓ро╛роорпН?',
      category: 'location',
      language: 'ta'
    },
    {
      label: 'ЁЯМзя╕П рооро┤рпИ рокро░ро┐роЪрпЛродройрпИ',
      text: 'роЗройрпНро▒рпБ рооро┤рпИ рокрпЖропрпНропрпБрооро╛?',
      category: 'weather',
      language: 'ta'
    },
    {
      label: 'ЁЯОи ро╡ро╛ро░ роЗро▒рпБродро┐ роЪрпЖропро▓рпНрокро╛роЯрпБроХро│рпН',
      text: 'роЗроирпНрод ро╡ро╛ро░ роЗро▒рпБродро┐ропро┐ро▓рпН роиро╛ройрпН роОройрпНрой роЪрпЖропро▓рпНрокро╛роЯрпБроХро│рпИроЪрпН роЪрпЖропрпНропро▓ро╛роорпН?',
      category: 'activity',
      language: 'ta'
    }
  ];

  // English story prompts
  storyPromptsEn: SuggestedPrompt[] = [
    {
      label: 'ЁЯПл School Days',
      text: 'I remember my first day at school in Singapore...',
      category: 'activity',
      language: 'en'
    },
    {
      label: 'ЁЯОЙ Festivals',
      text: 'My favorite festival celebration was...',
      category: 'activity',
      language: 'en'
    },
    {
      label: 'ЁЯНЬ Food Memories',
      text: 'I remember the old hawker center where...',
      category: 'location',
      language: 'en'
    },
    {
      label: 'ЁЯСитАНЁЯСйтАНЁЯСзтАНЁЯСж Family Time',
      text: 'A special family moment I remember is...',
      category: 'activity',
      language: 'en'
    }
  ];

  // Chinese story prompts
  storyPromptsZh: SuggestedPrompt[] = [
    {
      label: 'ЁЯПл хнжцабцЧ╢хЕЙ',
      text: 'цИСшо░х╛ЧхЬицЦ░хКахЭбф╕КхнжчЪДчммф╕Ахдй...',
      category: 'activity',
      language: 'zh'
    },
    {
      label: 'ЁЯОЙ шКВцЧех║ЖхЕ╕',
      text: 'цИСцЬАхЦЬцмвчЪДшКВцЧех║ЖхЕ╕цШп...',
      category: 'activity',
      language: 'zh'
    },
    {
      label: 'ЁЯНЬ ч╛ОщгЯхЫЮх┐Ж',
      text: 'цИСшо░х╛ЧщВгф╕кцЧзх░Пш┤йф╕нх┐Гя╝МщВгщЗМ...',
      category: 'location',
      language: 'zh'
    },
    {
      label: 'ЁЯСитАНЁЯСйтАНЁЯСзтАНЁЯСж хо╢х║нцЧ╢хЕЙ',
      text: 'цИСшо░х╛Чф╕Аф╕кчЙ╣хИлчЪДхо╢х║нцЧ╢хИ╗цШп...',
      category: 'activity',
      language: 'zh'
    }
  ];

  // Malay story prompts
  storyPromptsMs: SuggestedPrompt[] = [
    {
      label: 'ЁЯПл Hari Persekolahan',
      text: 'Saya ingat hari pertama saya di sekolah di Singapura...',
      category: 'activity',
      language: 'ms'
    },
    {
      label: 'ЁЯОЙ Perayaan',
      text: 'Perayaan festival kegemaran saya adalah...',
      category: 'activity',
      language: 'ms'
    },
    {
      label: 'ЁЯНЬ Kenangan Makanan',
      text: 'Saya ingat pusat penjaja lama di mana...',
      category: 'location',
      language: 'ms'
    },
    {
      label: 'ЁЯСитАНЁЯСйтАНЁЯСзтАНЁЯСж Masa Keluarga',
      text: 'Satu momen keluarga istimewa yang saya ingat ialah...',
      category: 'activity',
      language: 'ms'
    }
  ];

  // Tamil story prompts
  storyPromptsTa: SuggestedPrompt[] = [
    {
      label: 'ЁЯПл рокро│рпНро│ро┐ роиро╛роЯрпНроХро│рпН',
      text: 'роЪро┐роЩрпНроХрокрпНрокрпВро░ро┐ро▓рпН рокро│рпНро│ро┐ропро┐ро▓рпН роОройрпН роорпБродро▓рпН роиро╛ро│рпН роиро┐ройрпИро╡ро┐ро░рпБроХрпНроХро┐ро▒родрпБ...',
      category: 'activity',
      language: 'ta'
    },
    {
      label: 'ЁЯОЙ родро┐ро░рпБро╡ро┐ро┤ро╛роХрпНроХро│рпН',
      text: 'роОройроХрпНроХрпБ рокро┐роЯро┐родрпНрод родро┐ро░рпБро╡ро┐ро┤ро╛ роХрпКрогрпНроЯро╛роЯрпНроЯроорпН...',
      category: 'activity',
      language: 'ta'
    },
    {
      label: 'ЁЯНЬ роЙрогро╡рпБ роиро┐ройрпИро╡рпБроХро│рпН',
      text: 'роЕроирпНрод рокро┤рпИроп ро╣ро╛роХрпНроХро░рпН роорпИропроорпН роиро┐ройрпИро╡ро┐ро▓рпН роЙро│рпНро│родрпБ, роЕроЩрпНроХрпЗ...',
      category: 'location',
      language: 'ta'
    },
    {
      label: 'ЁЯСитАНЁЯСйтАНЁЯСзтАНЁЯСж роХрпБроЯрпБроорпНрок роирпЗро░роорпН',
      text: 'роиро╛ройрпН роиро┐ройрпИро╡ро┐ро▓рпН роХрпКро│рпНро│рпБроорпН роТро░рпБ роЪро┐ро▒рокрпНрокрпБ роХрпБроЯрпБроорпНрок родро░рпБрогроорпН...',
      category: 'activity',
      language: 'ta'
    }
  ];

  constructor(private openAiService: OpenAiService) {}

  scrollToBottom() {
    if (this.content) {
      this.content.scrollToBottom(300); // 300 ms duration
    }
  }

  async ngOnInit() {
    this.loadSavedLanguage();
    this.initializeSpeechRecognition();
    // Initialization logic remains unchanged...
    
    // Initialize the OpenAI thread
    try {
      await this.openAiService.loadExistingThread();
    } catch (error) {
      console.error('Error initializing thread:', error);
    }

    // Test the API connection
    this.openAiService.testConnection().then(success => {
      if (success) {
        console.log("OpenAI connection established successfully");
      } else {
        console.error("Failed to connect to OpenAI API");
      }
    });
  }

  loadSavedLanguage() {
    const savedLanguage = localStorage.getItem('elderleadLanguage');
    if (savedLanguage && ['en', 'zh', 'ms', 'ta'].includes(savedLanguage)) {
      this.currentLanguage = savedLanguage;
    }
  }

  saveLanguagePreference(language: string) {
    localStorage.setItem('elderleadLanguage', language);
  }

  changeLanguage(language: string) {
    this.currentLanguage = language;
    this.saveLanguagePreference(language);
    
    // Update speech recognition language
    this.updateRecognitionLanguage();
    
    // Add language change notification if already in a mode
    if (this.activeMode) {
      const languageNames = {
        'en': 'English',
        'zh': 'ф╕нцЦЗ (Chinese)',
        'ms': 'Bahasa Melayu (Malay)',
        'ta': 'родрооро┐ро┤рпН (Tamil)'
      };
      
      this.messages.push({
        content: `Language changed to ${languageNames[language as keyof typeof languageNames]}`,
        sender: 'bot',
        type: 'text',
        timestamp: new Date(),
        language: 'en' // This message is always in English for clarity
      });
      
      // Add a welcome message in the new language
      this.messages.push({
        content: this.activeMode === 'chat' 
          ? this.getText('welcomeMessage')
          : this.getText('storyWelcome'),
        sender: 'bot',
        type: 'text',
        timestamp: new Date(),
        language: language
      });
      
      this.scrollToBottom();
    }
  }

  getText(key: string): string {
    return this.uiText[this.currentLanguage as keyof typeof this.uiText][key as keyof (typeof this.uiText)['en']] || '';
  }

  getCurrentLanguageName(): string {
    const names = {
      'en': 'EN',
      'zh': 'ф╕нцЦЗ',
      'ms': 'MY',
      'ta': 'родрооро┐ро┤рпН'
    };
    return names[this.currentLanguage as keyof typeof names] || 'EN';
  }

  getEnhancedWelcomeMessage(): string {
    const languageInstructions = {
      'en': "Hello! Choose a suggestion above or type your own question! You can change the language using the language button in the top right corner.",
      'zh': "цВихе╜я╝БщАЙцЛйф╕КщЭвчЪДх╗║шооцИЦш╛УхЕецВишЗкх╖▒чЪДщЧощвШя╝БцВихПпф╗еф╜┐чФихП│ф╕КшзТчЪДшпншиАцМЙщТоцЫ┤цФ╣шпншиАуАВ",
      'ms': "Hai! Pilih cadangan di atas atau taip soalan anda sendiri! Anda boleh menukar bahasa menggunakan butang bahasa di sudut kanan atas.",
      'ta': "ро╡рогроХрпНроХроорпН! роорпЗро▓рпЗ роЙро│рпНро│ рокро░ро┐роирпНродрпБро░рпИропрпИродрпН родрпЗро░рпНроирпНродрпЖроЯрпБроХрпНроХро╡рпБроорпН роЕро▓рпНро▓родрпБ роЙроЩрпНроХро│рпН роЪрпКроирпНродроХрпН роХрпЗро│рпНро╡ро┐ропрпИродрпН родроЯрпНроЯроЪрпНроЪрпБ роЪрпЖропрпНропро╡рпБроорпН! ро╡ро▓родрпБ роорпЗро▓рпН роорпВро▓рпИропро┐ро▓рпН роЙро│рпНро│ роорпКро┤ро┐ рокрпКродрпНродро╛ройрпИрокрпН рокропройрпНрокроЯрпБродрпНродро┐ роорпКро┤ро┐ропрпИ рооро╛ро▒рпНро▒ро▓ро╛роорпН."
    };
    
    return languageInstructions[this.currentLanguage as keyof typeof languageInstructions] || languageInstructions['en'];
  }

  selectMode(mode: 'chat' | 'story') {
    this.activeMode = mode;
    this.messages = [{
      content: mode === 'chat' 
        ? this.getEnhancedWelcomeMessage()
        : this.getText('storyWelcome'),
      sender: 'bot',
      type: 'text',
      timestamp: new Date(),
      language: this.currentLanguage
    }];
    this.scrollToBottom();
  }

  resetMode() {
    this.activeMode = null;
    this.messages = [];
    this.userInput = '';
  }

  getPrompts(): SuggestedPrompt[] {
    if (this.activeMode === 'chat') {
      switch (this.currentLanguage) {
        case 'zh': return this.suggestedPromptsZh;
        case 'ms': return this.suggestedPromptsMs;
        case 'ta': return this.suggestedPromptsTa;
        default: return this.suggestedPromptsEn;
      }
    } else {
      switch (this.currentLanguage) {
        case 'zh': return this.storyPromptsZh;
        case 'ms': return this.storyPromptsMs;
        case 'ta': return this.storyPromptsTa;
        default: return this.storyPromptsEn;
      }
    }
  }

  async sendSuggestedPrompt(prompt: SuggestedPrompt) {
    this.userInput = prompt.text;
    await this.sendMessage();
  }

  private initializeSpeechRecognition() {
    if ('webkitSpeechRecognition' in window) {
      this.recognition = new (window as any).webkitSpeechRecognition();
      this.recognition.continuous = false;
      this.recognition.interimResults = false;
      this.updateRecognitionLanguage();

      this.recognition.onresult = (event: any) => {
        const transcript = event.results[0][0].transcript;
        if (transcript) {
          this.userInput = transcript;
          this.sendMessage();
        }
      };

      this.recognition.onerror = (event: any) => {
        console.error('Speech recognition error:', event.error);
        this.isLoading = false;
      };
    }
  }

  private updateRecognitionLanguage() {
    if (!this.recognition) return;
    
    // Map our language codes to Web Speech API language codes
    const langMap: {[key: string]: string} = {
      'en': 'en-SG', // Singapore English
      'zh': 'zh-CN', // Mandarin Chinese
      'ms': 'ms-MY', // Malay
      'ta': 'ta-SG'  // Tamil
    };
    
    this.recognition.lang = langMap[this.currentLanguage] || 'en-SG';
  }

  startVoiceInput() {
    if (this.recognition && !this.isLoading) {
      this.updateRecognitionLanguage();
      this.isLoading = true;
      this.recognition.start();
    }
  }

  async sendMessage() {
    if (!this.userInput.trim() || this.isLoading) return;

    const message = this.userInput.trim();
    this.userInput = '';
    this.isLoading = true;

    try {
      // Add user message
      this.messages.push({
        content: message,
        sender: 'user',
        type: 'text',
        timestamp: new Date(),
        language: this.currentLanguage
      });
      this.scrollToBottom();

      // Check if this is a direct image generation request
      const isImageRequest = message.includes('хЫ╛хГП') || 
                            message.includes('чФЯцИР') ||
                            message.toLowerCase().includes('image') || 
                            message.toLowerCase().includes('picture');

      if (this.activeMode === 'chat') {
        if (isImageRequest) {
          // Direct image generation in chat mode
          this.messages.push({
            content: this.getImageGenerationMessage(),
            sender: 'bot',
            type: 'text',
            timestamp: new Date(),
            language: this.currentLanguage
          });
          this.scrollToBottom();
          
          const imageUrl = await this.openAiService.generateImageDirect(message);
          
          if (imageUrl) {
            // Handle image
            const img = new Image();
            img.onload = () => {
              this.scrollToBottom();
            };
            img.src = imageUrl;
            
            this.messages.push({
              content: '',
              sender: 'bot',
              type: 'image',
              imageUrl: imageUrl,
              timestamp: new Date()
            });
            this.scrollToBottom();
            
            this.messages.push({
              content: this.getImageSuccessMessage(),
              sender: 'bot',
              type: 'text',
              timestamp: new Date(),
              language: this.currentLanguage
            });
            this.scrollToBottom();
          } else {
            this.messages.push({
              content: this.getText('errorMessage'),
              sender: 'bot',
              type: 'text',
              timestamp: new Date(),
              language: this.currentLanguage
            });
            this.scrollToBottom();
          }
        } else {
          // Normal chat response
          const response = await this.openAiService.generateChatResponse(message, this.currentLanguage);
          
          this.messages.push({
            content: response,
            sender: 'bot',
            type: 'text',
            timestamp: new Date(),
            language: this.currentLanguage
          });
          this.scrollToBottom();
        }
      } 
      else {
        // Story mode - always treat as a memory to turn into a story with image
        const loadingIndex = this.messages.push({
          content: this.getText('loadingMessage'),
          sender: 'bot',
          type: 'text',
          timestamp: new Date(),
          language: this.currentLanguage
        }) - 1;
        this.scrollToBottom();

        const result = await this.openAiService.generateStoryWithImage(message, this.currentLanguage);
        
        // Remove loading message
        this.messages.splice(loadingIndex, 1);

        if (result.story) {
          this.messages.push({
            content: result.story,
            sender: 'bot',
            type: 'text',
            timestamp: new Date(),
            language: this.currentLanguage
          });
          this.scrollToBottom();
        }
        
        if (result.imageUrl) {
          // Handle image loading
          const img = new Image();
          img.onload = () => {
            this.scrollToBottom();
          };
          img.src = result.imageUrl;
          
          this.messages.push({
            content: '',
            sender: 'bot',
            type: 'image',
            imageUrl: result.imageUrl,
            timestamp: new Date()
          });
          this.scrollToBottom();
        }
      }
    } catch (error) {
      console.error('Message handling error:', error);
      this.messages.push({
        content: this.getText('errorMessage'),
        sender: 'bot',
        type: 'text',
        timestamp: new Date(),
        language: this.currentLanguage
      });
      this.scrollToBottom();
    } finally {
      this.isLoading = false;
    }
  }

  getImageGenerationMessage(): string {
    const messages: Record<string, string> = {
      'en': "I'll create that image for you now...",
      'zh': "цИСчО░хЬиф╕║цВихИЫх╗║ш┐Щх╝ахЫ╛хГП...",
      'ms': "Saya akan membuat gambar itu untuk anda sekarang...",
      'ta': "роиро╛ройрпН роЗрокрпНрокрпЛродрпБ роЙроЩрпНроХро│рпБроХрпНроХро╛роХ роЕроирпНрод рокроЯродрпНродрпИ роЙро░рпБро╡ро╛роХрпНроХрпБроХро┐ро▒рпЗройрпН..."
    };
    return messages[this.currentLanguage] || messages['en'];
  }

  getImageSuccessMessage(): string {
    const messages: Record<string, string> = {
      'en': "Here's your image! What do you think?",
      'zh': "ш┐ЩцШпцВичЪДхЫ╛хГПя╝БцВишзЙх╛ЧцАОф╣Ица╖я╝Я",
      'ms': "Ini gambar anda! Apa pendapat anda?",
      'ta': "роЗродрпЛ роЙроЩрпНроХро│рпН рокроЯроорпН! роирпАроЩрпНроХро│рпН роОройрпНрой роиро┐ройрпИроХрпНроХро┐ро▒рпАро░рпНроХро│рпН?"
    };
    return messages[this.currentLanguage] || messages['en'];
  }

  async refresh(event: any) {
    // Reset the chat state
    this.messages = [];
    this.userInput = '';
    this.isLoading = false;
    
    // If we're in a specific mode, reinitialize that mode
    if (this.activeMode) {
      this.messages = [{
        content: this.activeMode === 'chat' 
          ? this.getEnhancedWelcomeMessage()
          : this.getText('storyWelcome'),
        sender: 'bot',
        type: 'text',
        timestamp: new Date(),
        language: this.currentLanguage
      }];
      this.scrollToBottom();
    }

    // Complete the refresh
    event.target.complete();
  }
}